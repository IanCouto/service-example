export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  IOSanitizedString: any;
  IOUpload: any;
  Upload: any;
};



export type ProductView = {
  __typename?: 'ProductView';
  slug?: Maybe<Scalars['String']>;
  count?: Maybe<Scalars['Int']>;
};

export type Query = {
  __typename?: 'Query';
  productList?: Maybe<Array<Maybe<ProductView>>>;
};


export type QueryProductListArgs = {
  topN?: Maybe<Scalars['Int']>;
};


export {}